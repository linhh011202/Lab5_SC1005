1. seg7_driver.v

+edit the bench number and comment 4'd10:



// Enter your Bench Number here. If required, add the offset given
    wire [3:0] benchNo_10 = 4'd0;  // Enter the tens digit of YOUR bench number
    wire [3:0] benchNo_1 = 4'd4;   // Enter the ones digit of YOUR bench number


// the 7 -bit segments
    always @*
    begin
        case (selnum)
            4'd0  : seg_L = 7'b100_0000;
            4'd1  : seg_L = 7'b111_1001;
            4'd2  : seg_L = 7'b010_0100;
            4'd3  : seg_L = 7'b011_0000;            
            4'd4  : seg_L = 7'b001_1001;
            4'd5  : seg_L = 7'b001_0010;
            4'd6  : seg_L = 7'b000_0010;
            4'd7  : seg_L = 7'b111_1000;
            4'd8  : seg_L = 7'b000_0000;
            4'd9  : seg_L = 7'b001_0000;
            //4'd10 : seg_L = 7'b000_1000;
            4'd11 : seg_L = 7'b000_0011;
            4'd12 : seg_L = 7'b100_0110;
            4'd13 : seg_L = 7'b010_0001;
            4'd14 : seg_L = 7'b000_0110;
            4'd15 : seg_L = 7'b000_1110;        
            default:seg_L = 7'b111_1111;
        endcase
    end

endmodule









2. convert.v: 




module convert(
    input [3:0] in,
    output reg [3:0] out
    );
always @ * 
begin
    case (in)
        4'd0: out = 4'hA;
        4'd1: out = 4'hA;
        4'd2: out = 4'hC;
        4'd3: out = 4'h0;
        4'd4: out = 4'hF;
        4'd5: out = 4'hF;
        4'd6: out = 4'hE;
        4'd7: out = 4'hE;
        4'd8: out = 4'hA;
        4'd9: out = 4'h1;
        4'd10: out = 4'h5;
        4'd11: out = 4'hA;
        4'd12: out = 4'h9;
        4'd13: out = 4'h0;
        4'd14: out = 4'h0;
        4'd15: out = 4'hD;
    endcase
end



endmodule





3.scroll.v:



module scroll(
    input clk,
    input rst,
    output [15:0] display
    );
reg [3:0] count;


always @ (posedge clk)
begin
    if (rst)
        count <= 4'd0;
    else 
        count <= count + 1'b1;
end
wire[3:0] a,b,c,d;

assign a = count;
assign b = count + 1;
assign c = count + 2;
assign d = count + 3;

convert iter_1 (.in(a), .out(display[15:12]));
convert iter_2 (.in(b), .out(display[11:8]));
convert iter_3 (.in(c), .out(display[7:4]));
convert iter_4 (.in(d), .out(display[3:0]));

endmodule






4. Lab5_top.v

// The top level module. It implements the Verilog system shown in Figure 1.

module Lab5_top(input clk, rst, sel, output [6:0] seg_L, output [3:0] anode_L);
    wire s_clk;
    wire [15:0] value;

    scroll uut1 (.clk(s_clk), .rst(rst), .display(value)); 
    slow_clkgen uut2 (.clk(clk), .rst(rst), .clk_out(s_clk));
    seg7_driver uut3 (.clk(clk), .rst(rst), .sel(sel), .value(value), .anode_d(4'b0000), .seg_L(seg_L), .anode_L(anode_L));
endmodule

